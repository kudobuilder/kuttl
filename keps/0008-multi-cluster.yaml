---
kep-number: 8
short-desc: This KEP describes how we will support more than one cluster under test
title: KUTTL Mult-Cluster Support
authors:
  - "@jbarrick-mesosphere"
owners:
  - "@jbarrick-mesosphere"
creation-date: 2021-01-08
last-updated: 2021-01-08
status: provisional
---

# KUTTL Multi-Cluster Support

This KEP describes how we will support more than one cluster in KUTTL.

## Table of Contents

* [Summary](#summary)
  * [Goals](#goals)
* [Proposal](#proposal)
* [Alternatives](#alternatives)

## Summary

When working with more than one cluster (for example, federated clusters), then it may be desirable to apply or assert on resources in multiple clusters. In my use-case, I want to ensure that federated resources are properly propagated to the target cluster.

Currently, KUTTL only supports a single test cluster. This KEP describes how we can allow custom Kubernetes contexts per test step.

### Goals

* Support applying resources across more than one test cluster.
* Support asserting on resources across more than one test cluster.

## Proposals - TestStep API changes

The proposal is to add a new setting within `TestStep`. We propose this field be called `runOnCluster` and of type `[]string`. This setting would allow the user to specify a list of the clusters set up by the `TestSuite` on which to run `TestSteps`.

Recall that `TestSuite` contains a map of `KindConfig`s, entries in the `runOnCluster` would refer to one of the keys in this map. Where a user has specified homogenous clusters using `GlobalKindConfig` and `NumClusters`, a uniform naming scheme should exist to make identification of the right cluster to run on possible.


```
apiVersion: kudo.dev/v1alpha1
kind: TestStep
runOnCluster:
- my-cluster-1
- my-cluster-2
```

If the runOnCluster setting is not set, then the `TestStep` will be run on all clusters. 

Where multiple clusters are specified (including if the `runOnCluster` field is unset), each script and command will be run in parallel on the desired clusters. 

The kubeconfig file location, and the name of the context for the target cluster will be made available as environment variables `KUBECONFIG` and `KUBECONTEXT` in the scripts and commands.

A namespace is generated for each `TestCase` and this needs to be created in each cluster referenced by `TestSteps` within the `TestCase`. At the beginning of the `TestCase`, the generated namespace will be created in every cluster used in the `TestCase`. The namespaces will also be deleted at the end if `--skip-delete` is not set.

## Proposals - Reporting API changes

Within the reporting structs, `Failure` may need to be modified to provide an indication of which cluster a given `TestStep failed on`. 