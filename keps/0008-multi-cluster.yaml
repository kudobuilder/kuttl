---
kep-number: 8
short-desc: This KEP describes how we will support more than one cluster under test
title: KUTTL Mult-Cluster Support
authors:
  - "@jbarrick-mesosphere"
owners:
  - "@jbarrick-mesosphere"
creation-date: 2021-01-08
last-updated: 2021-01-08
status: provisional
---

# KUTTL Multi-Cluster Support

This KEP describes how we will support more than one cluster in KUTTL.

## Table of Contents

* [Summary](#summary)
  * [Goals](#goals)
* [Proposal](#proposal)
* [Alternatives](#alternatives)

## Summary

When working with more than one cluster (for example, federated clusters), then it may be desirable to apply or assert on resources in multiple clusters. In my use-case, I want to ensure that federated resources are properly propagated to the target cluster.

Currently, KUTTL only supports a single test cluster. This KEP describes how we can allow custom Kubernetes contexts per test step.

### Goals

* Support applying resources across more than one test cluster.
* Support asserting on resources across more than one test cluster.

## Proposal

The proposal is to add a new setting to the `TestStep` object: `kubeconfig`. This setting would allow the user to specify an alternative kubeconfig path to use for a given test step.

```
apiVersion: kudo.dev/v1alpha1
kind: TestStep
kubeconfig: ./secondary-cluster.yaml
```

If the kubeconfig setting is not set, then the global Kubernetes client is used.

If the kubeconfig setting is set, then it will be used for all Kubernetes operations within the step: commands (the KUBECONFIG environment variable will be set to the kubeconfig setting, relative to the KUTTL CLI's working directory), applied resources, asserts, and errors. This means that a single step can only be configured to use a single kubeconfig, but multiple steps can be used if a test case needs to interact with more than one cluster. This allows, for example, a federated resource to be created in one step and then another step can be used to verify that it actually exists on the destination cluster.

Note that the `kubeconfig` setting on the `TestStep` would be unaffected by the global Kubernetes configuration, so the `--kubeconfig` flag, `$KUBECONFIG` environment variable, etc, will be ignored for these steps.

A namespace is generated for each `TestCase` and this needs to be created in each cluster referenced by `TestSteps` within the `TestCase`. At the beginning of the `TestCase`, the generated namespace will be created in every cluster used in the `TestCase`. The namespaces will also be deleted at the end if `--skip-delete` is not set.
